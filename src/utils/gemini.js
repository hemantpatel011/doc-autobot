import { GoogleGenerativeAI } from '@google/generative-ai';

// Importing the API key from environment variables
// Make sure to set this variable in your environment before running the script 
const API_KEY = process.env.GEMINI_API_KEY;

// Check if the API key is set
// If not, it will log a warning message
if (!API_KEY) {
  console.warn('Gemini API key not found. Please set the GEMINI_API_KEY environment variable.');
}

// Initialize the Gemini AI client with the API key
const genAI = new GoogleGenerativeAI(API_KEY);

// Function to generate README.md content from project content using Gemini AI
// It uses the Gemini AI model to generate a professional README.md file based on the provided project content
export const generateReadmeFromProject = async (projectContent) => {
  if (!API_KEY) {
    throw new Error('Gemini API key is not set.');
  }

  // Using the Gemini AI model to generate content
  const model = genAI.getGenerativeModel({ model: 'gemini-2.5-pro' });

  // Prompt for the Gemini AI model to generate README.md content
  const prompt = `
    Acts as a professional README.md documentation writer. Based on the following project content, generate a professional README.md file.
    The README.md should include the following sections:
    - Badges (npm, Python, GitHub Actions, Docker, Made with doc-autobot. etc)
    - Project name 
    - Project description
    > **Note**: This README was generated by doc-autobot ðŸ¤–
    - Table of contents 
    - Features and functionalities 
    - Screenshots or demo (if applicable)
    - Prerequisites (if any)
    - Installation Steps (auto-detected per stack)
    - Tech Stack (auto-detected)
    - Environment variables (if any based on project content root/client/server)
    - Database schema (if applicable)
    - API/CLI Commands (if applicable)
    - Folder Structure (tree)
    - Future improvements or roadmap(if applicable)
    - Contribution guidelines (link to CONTRIBUTING.md)
    - License (default to MIT)
    - Contact/Author Info
    - Acknowledgements (if any)

    if there is no information about any section, don't include that section in the README.md.
    If there is any code snippet, format it properly using markdown syntax highlighting.
    if there are any commands, format them properly using markdown syntax highlighting.
    if there is any other section, format it properly using markdown syntax highlighting.
    - Always add this badge at the end of readme: [![Made with doc-autobot](https://img.shields.io/badge/Made%20with-doc--autobotðŸ¤–-green?style=for-the-badge)](https://github.com/hemantpatel011/doc-autobot.git)
    
    Ensure the README.md is well-structured, easy to read, and formatted with Markdown. Don't give extra text only add short comments in folder Structure i want markdown only.

    Here is the project content:
    ${projectContent}
  `;

  // Generate the README.md content using the Gemini AI model
  try {
    const result = await model.generateContent(prompt);
    const response = await result.response;
    const text = response.text();
    return text;
  } catch (error) {
    console.error('Error generating README.md with Gemini:', error);
  
  }
};